
stm32f4_RNG_random_led_blink_driver_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000878  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a00  08000a08  00010a08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a00  08000a00  00010a08  2**0
                  CONTENTS
  4 .ARM          00000000  08000a00  08000a00  00010a08  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a00  08000a08  00010a08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a00  08000a00  00010a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a04  08000a04  00010a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010a08  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010a08  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010a38  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000117c  00000000  00000000  00010a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000503  00000000  00000000  00011bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000128  00000000  00000000  00012100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000c5  00000000  00000000  00012228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000166d  00000000  00000000  000122ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000164d  00000000  00000000  0001395a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00005504  00000000  00000000  00014fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000002ec  00000000  00000000  0001a4ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  0001a798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080009e8 	.word	0x080009e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080009e8 	.word	0x080009e8

080001c8 <nvic_irqno_enable>:

#include"corem4.h"


void nvic_irqno_enable(uint32_t irq_num)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	 if(irq_num<32)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	2b1f      	cmp	r3, #31
 80001d4:	d809      	bhi.n	80001ea <nvic_irqno_enable+0x22>
		 NVIC_ISERx->NVIC_ISER0 |= (1U<<irq_num);
 80001d6:	4b16      	ldr	r3, [pc, #88]	; (8000230 <nvic_irqno_enable+0x68>)
 80001d8:	681a      	ldr	r2, [r3, #0]
 80001da:	2101      	movs	r1, #1
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	fa01 f303 	lsl.w	r3, r1, r3
 80001e2:	4913      	ldr	r1, [pc, #76]	; (8000230 <nvic_irqno_enable+0x68>)
 80001e4:	4313      	orrs	r3, r2
 80001e6:	600b      	str	r3, [r1, #0]
	 else if(irq_num<64)
	 	 NVIC_ISERx->NVIC_ISER1 |= (1U<<irq_num%32);
	 else if(irq_num<=81)
	 	NVIC_ISERx->NVIC_ISER2 |= (1U<<irq_num%32);

}
 80001e8:	e01c      	b.n	8000224 <nvic_irqno_enable+0x5c>
	 else if(irq_num<64)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2b3f      	cmp	r3, #63	; 0x3f
 80001ee:	d80b      	bhi.n	8000208 <nvic_irqno_enable+0x40>
	 	 NVIC_ISERx->NVIC_ISER1 |= (1U<<irq_num%32);
 80001f0:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <nvic_irqno_enable+0x68>)
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f003 031f 	and.w	r3, r3, #31
 80001fa:	2101      	movs	r1, #1
 80001fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000200:	490b      	ldr	r1, [pc, #44]	; (8000230 <nvic_irqno_enable+0x68>)
 8000202:	4313      	orrs	r3, r2
 8000204:	604b      	str	r3, [r1, #4]
}
 8000206:	e00d      	b.n	8000224 <nvic_irqno_enable+0x5c>
	 else if(irq_num<=81)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2b51      	cmp	r3, #81	; 0x51
 800020c:	d80a      	bhi.n	8000224 <nvic_irqno_enable+0x5c>
	 	NVIC_ISERx->NVIC_ISER2 |= (1U<<irq_num%32);
 800020e:	4b08      	ldr	r3, [pc, #32]	; (8000230 <nvic_irqno_enable+0x68>)
 8000210:	689a      	ldr	r2, [r3, #8]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f003 031f 	and.w	r3, r3, #31
 8000218:	2101      	movs	r1, #1
 800021a:	fa01 f303 	lsl.w	r3, r1, r3
 800021e:	4904      	ldr	r1, [pc, #16]	; (8000230 <nvic_irqno_enable+0x68>)
 8000220:	4313      	orrs	r3, r2
 8000222:	608b      	str	r3, [r1, #8]
}
 8000224:	bf00      	nop
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	e000e100 	.word	0xe000e100

08000234 <nvic_irqno_desable>:

void nvic_irqno_desable(uint32_t irq_num)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	 if(irq_num<32)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2b1f      	cmp	r3, #31
 8000240:	d809      	bhi.n	8000256 <nvic_irqno_desable+0x22>
		 NVIC_ICERx->NVIC_ICER0 |= (1U<<irq_num);
 8000242:	4b16      	ldr	r3, [pc, #88]	; (800029c <nvic_irqno_desable+0x68>)
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	2101      	movs	r1, #1
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	fa01 f303 	lsl.w	r3, r1, r3
 800024e:	4913      	ldr	r1, [pc, #76]	; (800029c <nvic_irqno_desable+0x68>)
 8000250:	4313      	orrs	r3, r2
 8000252:	600b      	str	r3, [r1, #0]
	 else if(irq_num<64)
	 	 NVIC_ICERx->NVIC_ICER1 |= (1U<<irq_num%32);
	 else if(irq_num<=81)
	 	NVIC_ICERx->NVIC_ICER2 |= (1U<<irq_num%32);

}
 8000254:	e01c      	b.n	8000290 <nvic_irqno_desable+0x5c>
	 else if(irq_num<64)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2b3f      	cmp	r3, #63	; 0x3f
 800025a:	d80b      	bhi.n	8000274 <nvic_irqno_desable+0x40>
	 	 NVIC_ICERx->NVIC_ICER1 |= (1U<<irq_num%32);
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <nvic_irqno_desable+0x68>)
 800025e:	685a      	ldr	r2, [r3, #4]
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f003 031f 	and.w	r3, r3, #31
 8000266:	2101      	movs	r1, #1
 8000268:	fa01 f303 	lsl.w	r3, r1, r3
 800026c:	490b      	ldr	r1, [pc, #44]	; (800029c <nvic_irqno_desable+0x68>)
 800026e:	4313      	orrs	r3, r2
 8000270:	604b      	str	r3, [r1, #4]
}
 8000272:	e00d      	b.n	8000290 <nvic_irqno_desable+0x5c>
	 else if(irq_num<=81)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2b51      	cmp	r3, #81	; 0x51
 8000278:	d80a      	bhi.n	8000290 <nvic_irqno_desable+0x5c>
	 	NVIC_ICERx->NVIC_ICER2 |= (1U<<irq_num%32);
 800027a:	4b08      	ldr	r3, [pc, #32]	; (800029c <nvic_irqno_desable+0x68>)
 800027c:	689a      	ldr	r2, [r3, #8]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f003 031f 	and.w	r3, r3, #31
 8000284:	2101      	movs	r1, #1
 8000286:	fa01 f303 	lsl.w	r3, r1, r3
 800028a:	4904      	ldr	r1, [pc, #16]	; (800029c <nvic_irqno_desable+0x68>)
 800028c:	4313      	orrs	r3, r2
 800028e:	608b      	str	r3, [r1, #8]
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	e000e180 	.word	0xe000e180

080002a0 <gpio_perip_clock_en>:
 *      Author: ramazan
 */
#include"gpio.h"
#include"utility.h"
void gpio_perip_clock_en(GPIO_RegDef_t* pGpiox)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
	 if(pGpiox == GPIOA)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	4a33      	ldr	r2, [pc, #204]	; (8000378 <gpio_perip_clock_en+0xd8>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	d106      	bne.n	80002be <gpio_perip_clock_en+0x1e>
		 GPIOA_CLOCK_ENABLE();
 80002b0:	4b32      	ldr	r3, [pc, #200]	; (800037c <gpio_perip_clock_en+0xdc>)
 80002b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b4:	4a31      	ldr	r2, [pc, #196]	; (800037c <gpio_perip_clock_en+0xdc>)
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	6313      	str	r3, [r2, #48]	; 0x30
		 GPIOG_CLOCK_ENABLE();
	 else if(pGpiox == GPIOH)
		 GPIOH_CLOCK_ENABLE();
	 else if(pGpiox == GPIOI)
		 GPIOI_CLOCK_ENABLE();
}
 80002bc:	e056      	b.n	800036c <gpio_perip_clock_en+0xcc>
	 else if(pGpiox == GPIOB)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a2f      	ldr	r2, [pc, #188]	; (8000380 <gpio_perip_clock_en+0xe0>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d106      	bne.n	80002d4 <gpio_perip_clock_en+0x34>
		 GPIOB_CLOCK_ENABLE();
 80002c6:	4b2d      	ldr	r3, [pc, #180]	; (800037c <gpio_perip_clock_en+0xdc>)
 80002c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ca:	4a2c      	ldr	r2, [pc, #176]	; (800037c <gpio_perip_clock_en+0xdc>)
 80002cc:	f043 0302 	orr.w	r3, r3, #2
 80002d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d2:	e04b      	b.n	800036c <gpio_perip_clock_en+0xcc>
	 else if(pGpiox == GPIOC)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a2b      	ldr	r2, [pc, #172]	; (8000384 <gpio_perip_clock_en+0xe4>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d106      	bne.n	80002ea <gpio_perip_clock_en+0x4a>
		 GPIOC_CLOCK_ENABLE();
 80002dc:	4b27      	ldr	r3, [pc, #156]	; (800037c <gpio_perip_clock_en+0xdc>)
 80002de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e0:	4a26      	ldr	r2, [pc, #152]	; (800037c <gpio_perip_clock_en+0xdc>)
 80002e2:	f043 0304 	orr.w	r3, r3, #4
 80002e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e8:	e040      	b.n	800036c <gpio_perip_clock_en+0xcc>
	 else if(pGpiox == GPIOD)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4a26      	ldr	r2, [pc, #152]	; (8000388 <gpio_perip_clock_en+0xe8>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d106      	bne.n	8000300 <gpio_perip_clock_en+0x60>
		 GPIOD_CLOCK_ENABLE();
 80002f2:	4b22      	ldr	r3, [pc, #136]	; (800037c <gpio_perip_clock_en+0xdc>)
 80002f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f6:	4a21      	ldr	r2, [pc, #132]	; (800037c <gpio_perip_clock_en+0xdc>)
 80002f8:	f043 0308 	orr.w	r3, r3, #8
 80002fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002fe:	e035      	b.n	800036c <gpio_perip_clock_en+0xcc>
	 else if(pGpiox == GPIOE)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4a22      	ldr	r2, [pc, #136]	; (800038c <gpio_perip_clock_en+0xec>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d106      	bne.n	8000316 <gpio_perip_clock_en+0x76>
		 GPIOE_CLOCK_ENABLE();
 8000308:	4b1c      	ldr	r3, [pc, #112]	; (800037c <gpio_perip_clock_en+0xdc>)
 800030a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030c:	4a1b      	ldr	r2, [pc, #108]	; (800037c <gpio_perip_clock_en+0xdc>)
 800030e:	f043 0310 	orr.w	r3, r3, #16
 8000312:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000314:	e02a      	b.n	800036c <gpio_perip_clock_en+0xcc>
	 else if(pGpiox == GPIOF)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4a1d      	ldr	r2, [pc, #116]	; (8000390 <gpio_perip_clock_en+0xf0>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d106      	bne.n	800032c <gpio_perip_clock_en+0x8c>
		 GPIOF_CLOCK_ENABLE();
 800031e:	4b17      	ldr	r3, [pc, #92]	; (800037c <gpio_perip_clock_en+0xdc>)
 8000320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000322:	4a16      	ldr	r2, [pc, #88]	; (800037c <gpio_perip_clock_en+0xdc>)
 8000324:	f043 0320 	orr.w	r3, r3, #32
 8000328:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032a:	e01f      	b.n	800036c <gpio_perip_clock_en+0xcc>
	 else if(pGpiox == GPIOG)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a19      	ldr	r2, [pc, #100]	; (8000394 <gpio_perip_clock_en+0xf4>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d106      	bne.n	8000342 <gpio_perip_clock_en+0xa2>
		 GPIOG_CLOCK_ENABLE();
 8000334:	4b11      	ldr	r3, [pc, #68]	; (800037c <gpio_perip_clock_en+0xdc>)
 8000336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000338:	4a10      	ldr	r2, [pc, #64]	; (800037c <gpio_perip_clock_en+0xdc>)
 800033a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800033e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000340:	e014      	b.n	800036c <gpio_perip_clock_en+0xcc>
	 else if(pGpiox == GPIOH)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a14      	ldr	r2, [pc, #80]	; (8000398 <gpio_perip_clock_en+0xf8>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d106      	bne.n	8000358 <gpio_perip_clock_en+0xb8>
		 GPIOH_CLOCK_ENABLE();
 800034a:	4b0c      	ldr	r3, [pc, #48]	; (800037c <gpio_perip_clock_en+0xdc>)
 800034c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034e:	4a0b      	ldr	r2, [pc, #44]	; (800037c <gpio_perip_clock_en+0xdc>)
 8000350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000354:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000356:	e009      	b.n	800036c <gpio_perip_clock_en+0xcc>
	 else if(pGpiox == GPIOI)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a10      	ldr	r2, [pc, #64]	; (800039c <gpio_perip_clock_en+0xfc>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d105      	bne.n	800036c <gpio_perip_clock_en+0xcc>
		 GPIOI_CLOCK_ENABLE();
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <gpio_perip_clock_en+0xdc>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000364:	4a05      	ldr	r2, [pc, #20]	; (800037c <gpio_perip_clock_en+0xdc>)
 8000366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036c:	bf00      	nop
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	40020000 	.word	0x40020000
 800037c:	40023800 	.word	0x40023800
 8000380:	40020400 	.word	0x40020400
 8000384:	40020800 	.word	0x40020800
 8000388:	40020c00 	.word	0x40020c00
 800038c:	40021000 	.word	0x40021000
 8000390:	40021400 	.word	0x40021400
 8000394:	40021800 	.word	0x40021800
 8000398:	40021c00 	.word	0x40021c00
 800039c:	40022000 	.word	0x40022000

080003a0 <get_port_code>:

uint8_t get_port_code(const GPIO_RegDef_t* pGpioX)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	  if(pGpioX == GPIOA)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a1d      	ldr	r2, [pc, #116]	; (8000420 <get_port_code+0x80>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d101      	bne.n	80003b4 <get_port_code+0x14>
		  	  return GPIOA_PORT_CODE;
 80003b0:	2300      	movs	r3, #0
 80003b2:	e02f      	b.n	8000414 <get_port_code+0x74>
	  else if(pGpioX == GPIOB)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a1b      	ldr	r2, [pc, #108]	; (8000424 <get_port_code+0x84>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d101      	bne.n	80003c0 <get_port_code+0x20>
		  	  return GPIOB_PORT_CODE;
 80003bc:	2301      	movs	r3, #1
 80003be:	e029      	b.n	8000414 <get_port_code+0x74>
	  else if(pGpioX == GPIOB)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a18      	ldr	r2, [pc, #96]	; (8000424 <get_port_code+0x84>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d101      	bne.n	80003cc <get_port_code+0x2c>
	  		  return GPIOB_PORT_CODE;
 80003c8:	2301      	movs	r3, #1
 80003ca:	e023      	b.n	8000414 <get_port_code+0x74>
	  else if(pGpioX == GPIOC)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a16      	ldr	r2, [pc, #88]	; (8000428 <get_port_code+0x88>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d101      	bne.n	80003d8 <get_port_code+0x38>
	  		  return GPIOC_PORT_CODE;
 80003d4:	2302      	movs	r3, #2
 80003d6:	e01d      	b.n	8000414 <get_port_code+0x74>
	  else if(pGpioX == GPIOD)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a14      	ldr	r2, [pc, #80]	; (800042c <get_port_code+0x8c>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d101      	bne.n	80003e4 <get_port_code+0x44>
	  		  return GPIOD_PORT_CODE;
 80003e0:	2303      	movs	r3, #3
 80003e2:	e017      	b.n	8000414 <get_port_code+0x74>
	  else if(pGpioX == GPIOE)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a12      	ldr	r2, [pc, #72]	; (8000430 <get_port_code+0x90>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d101      	bne.n	80003f0 <get_port_code+0x50>
	  		  return GPIOE_PORT_CODE;
 80003ec:	2304      	movs	r3, #4
 80003ee:	e011      	b.n	8000414 <get_port_code+0x74>
	  else if(pGpioX == GPIOF)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a10      	ldr	r2, [pc, #64]	; (8000434 <get_port_code+0x94>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d101      	bne.n	80003fc <get_port_code+0x5c>
	  		  return GPIOF_PORT_CODE;
 80003f8:	2305      	movs	r3, #5
 80003fa:	e00b      	b.n	8000414 <get_port_code+0x74>
	  else if(pGpioX == GPIOG)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <get_port_code+0x98>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d101      	bne.n	8000408 <get_port_code+0x68>
	  		  return GPIOG_PORT_CODE;
 8000404:	2306      	movs	r3, #6
 8000406:	e005      	b.n	8000414 <get_port_code+0x74>
	  else if(pGpioX == GPIOH)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a0c      	ldr	r2, [pc, #48]	; (800043c <get_port_code+0x9c>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d101      	bne.n	8000414 <get_port_code+0x74>
	  		  return GPIOH_PORT_CODE;
 8000410:	2307      	movs	r3, #7
 8000412:	e7ff      	b.n	8000414 <get_port_code+0x74>
}
 8000414:	4618      	mov	r0, r3
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr
 8000420:	40020000 	.word	0x40020000
 8000424:	40020400 	.word	0x40020400
 8000428:	40020800 	.word	0x40020800
 800042c:	40020c00 	.word	0x40020c00
 8000430:	40021000 	.word	0x40021000
 8000434:	40021400 	.word	0x40021400
 8000438:	40021800 	.word	0x40021800
 800043c:	40021c00 	.word	0x40021c00

08000440 <gpio_init>:

void gpio_init(GPIO_Handle_t* pGpio_handle)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]

	//1.GPIO Clock ENABLE
	gpio_perip_clock_en(pGpio_handle->pGpioX);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff ff25 	bl	80002a0 <gpio_perip_clock_en>

	//2.GPIO pin modes configuration

	if(pGpio_handle->gPIO_PingConfig.pin_mode <= GPIO_MODE_ANALOG){
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	795b      	ldrb	r3, [r3, #5]
 800045a:	2b03      	cmp	r3, #3
 800045c:	d87e      	bhi.n	800055c <gpio_init+0x11c>
	temp=(pGpio_handle->gPIO_PingConfig.pin_mode<<(2*pGpio_handle->gPIO_PingConfig.pin_number)); // 01,<28
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	795b      	ldrb	r3, [r3, #5]
 8000462:	461a      	mov	r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	791b      	ldrb	r3, [r3, #4]
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	fa02 f303 	lsl.w	r3, r2, r3
 800046e:	617b      	str	r3, [r7, #20]
	pGpio_handle->pGpioX->MODER &= ~(0b11 <<(2*pGpio_handle->gPIO_PingConfig.pin_number)); //register clear ettik
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	791b      	ldrb	r3, [r3, #4]
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	2103      	movs	r1, #3
 800047e:	fa01 f303 	lsl.w	r3, r1, r3
 8000482:	43db      	mvns	r3, r3
 8000484:	4619      	mov	r1, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	400a      	ands	r2, r1
 800048c:	601a      	str	r2, [r3, #0]
	pGpio_handle->pGpioX->MODER |=temp;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	697a      	ldr	r2, [r7, #20]
 800049a:	430a      	orrs	r2, r1
 800049c:	601a      	str	r2, [r3, #0]

	//3. speed
	temp=pGpio_handle->gPIO_PingConfig.pin_speed<<(2*pGpio_handle->gPIO_PingConfig.pin_number);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	799b      	ldrb	r3, [r3, #6]
 80004a2:	461a      	mov	r2, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	791b      	ldrb	r3, [r3, #4]
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	fa02 f303 	lsl.w	r3, r2, r3
 80004ae:	617b      	str	r3, [r7, #20]
	pGpio_handle->pGpioX->OSPEEDR &= ~(0b11<<(2*pGpio_handle->gPIO_PingConfig.pin_number));
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	689a      	ldr	r2, [r3, #8]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	791b      	ldrb	r3, [r3, #4]
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	2103      	movs	r1, #3
 80004be:	fa01 f303 	lsl.w	r3, r1, r3
 80004c2:	43db      	mvns	r3, r3
 80004c4:	4619      	mov	r1, r3
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	400a      	ands	r2, r1
 80004cc:	609a      	str	r2, [r3, #8]
	pGpio_handle->pGpioX->OSPEEDR |= temp;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	6899      	ldr	r1, [r3, #8]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	697a      	ldr	r2, [r7, #20]
 80004da:	430a      	orrs	r2, r1
 80004dc:	609a      	str	r2, [r3, #8]

	//4. pull_up pull_down
	temp=pGpio_handle->gPIO_PingConfig.pin_pupd<<(2*pGpio_handle->gPIO_PingConfig.pin_number);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	7a1b      	ldrb	r3, [r3, #8]
 80004e2:	461a      	mov	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	fa02 f303 	lsl.w	r3, r2, r3
 80004ee:	617b      	str	r3, [r7, #20]
	pGpio_handle->pGpioX->PUPDR &= ~(0b11 <<(2*pGpio_handle->gPIO_PingConfig.pin_number));
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	68da      	ldr	r2, [r3, #12]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	791b      	ldrb	r3, [r3, #4]
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	2103      	movs	r1, #3
 80004fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000502:	43db      	mvns	r3, r3
 8000504:	4619      	mov	r1, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	400a      	ands	r2, r1
 800050c:	60da      	str	r2, [r3, #12]
	pGpio_handle->pGpioX->PUPDR |= temp;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	68d9      	ldr	r1, [r3, #12]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	697a      	ldr	r2, [r7, #20]
 800051a:	430a      	orrs	r2, r1
 800051c:	60da      	str	r2, [r3, #12]
	 //5.otype
	temp=pGpio_handle->gPIO_PingConfig.pin_otyper<<(pGpio_handle->gPIO_PingConfig.pin_number);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	79db      	ldrb	r3, [r3, #7]
 8000522:	461a      	mov	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	791b      	ldrb	r3, [r3, #4]
 8000528:	fa02 f303 	lsl.w	r3, r2, r3
 800052c:	617b      	str	r3, [r7, #20]
	pGpio_handle->pGpioX->OTYPER &= ~(0b1<<pGpio_handle->gPIO_PingConfig.pin_number);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	685a      	ldr	r2, [r3, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	791b      	ldrb	r3, [r3, #4]
 8000538:	4619      	mov	r1, r3
 800053a:	2301      	movs	r3, #1
 800053c:	408b      	lsls	r3, r1
 800053e:	43db      	mvns	r3, r3
 8000540:	4619      	mov	r1, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	400a      	ands	r2, r1
 8000548:	605a      	str	r2, [r3, #4]
	pGpio_handle->pGpioX->OTYPER |= temp;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	6859      	ldr	r1, [r3, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	697a      	ldr	r2, [r7, #20]
 8000556:	430a      	orrs	r2, r1
 8000558:	605a      	str	r2, [r3, #4]
		//ENABLE IMR
		//NVIC ENABLE

	}

}
 800055a:	e07c      	b.n	8000656 <gpio_init+0x216>
		if(pGpio_handle->gPIO_PingConfig.pin_mode == GPIO_MODE_FE_IT)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	795b      	ldrb	r3, [r3, #5]
 8000560:	2b04      	cmp	r3, #4
 8000562:	d115      	bne.n	8000590 <gpio_init+0x150>
			EXTI->FTSR |= (1u << pGpio_handle->gPIO_PingConfig.pin_number);
 8000564:	4b3e      	ldr	r3, [pc, #248]	; (8000660 <gpio_init+0x220>)
 8000566:	68da      	ldr	r2, [r3, #12]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	791b      	ldrb	r3, [r3, #4]
 800056c:	4619      	mov	r1, r3
 800056e:	2301      	movs	r3, #1
 8000570:	408b      	lsls	r3, r1
 8000572:	493b      	ldr	r1, [pc, #236]	; (8000660 <gpio_init+0x220>)
 8000574:	4313      	orrs	r3, r2
 8000576:	60cb      	str	r3, [r1, #12]
			EXTI->RTSR &= ~(1U << pGpio_handle->gPIO_PingConfig.pin_number);
 8000578:	4b39      	ldr	r3, [pc, #228]	; (8000660 <gpio_init+0x220>)
 800057a:	689a      	ldr	r2, [r3, #8]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	791b      	ldrb	r3, [r3, #4]
 8000580:	4619      	mov	r1, r3
 8000582:	2301      	movs	r3, #1
 8000584:	408b      	lsls	r3, r1
 8000586:	43db      	mvns	r3, r3
 8000588:	4935      	ldr	r1, [pc, #212]	; (8000660 <gpio_init+0x220>)
 800058a:	4013      	ands	r3, r2
 800058c:	608b      	str	r3, [r1, #8]
 800058e:	e031      	b.n	80005f4 <gpio_init+0x1b4>
		else if(pGpio_handle->gPIO_PingConfig.pin_mode == GPIO_MODE_RE_IT)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	795b      	ldrb	r3, [r3, #5]
 8000594:	2b05      	cmp	r3, #5
 8000596:	d115      	bne.n	80005c4 <gpio_init+0x184>
			EXTI->RTSR |= (1U << pGpio_handle->gPIO_PingConfig.pin_number);
 8000598:	4b31      	ldr	r3, [pc, #196]	; (8000660 <gpio_init+0x220>)
 800059a:	689a      	ldr	r2, [r3, #8]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	791b      	ldrb	r3, [r3, #4]
 80005a0:	4619      	mov	r1, r3
 80005a2:	2301      	movs	r3, #1
 80005a4:	408b      	lsls	r3, r1
 80005a6:	492e      	ldr	r1, [pc, #184]	; (8000660 <gpio_init+0x220>)
 80005a8:	4313      	orrs	r3, r2
 80005aa:	608b      	str	r3, [r1, #8]
			EXTI->FTSR &= ~(1U << pGpio_handle->gPIO_PingConfig.pin_number);
 80005ac:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <gpio_init+0x220>)
 80005ae:	68da      	ldr	r2, [r3, #12]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	791b      	ldrb	r3, [r3, #4]
 80005b4:	4619      	mov	r1, r3
 80005b6:	2301      	movs	r3, #1
 80005b8:	408b      	lsls	r3, r1
 80005ba:	43db      	mvns	r3, r3
 80005bc:	4928      	ldr	r1, [pc, #160]	; (8000660 <gpio_init+0x220>)
 80005be:	4013      	ands	r3, r2
 80005c0:	60cb      	str	r3, [r1, #12]
 80005c2:	e017      	b.n	80005f4 <gpio_init+0x1b4>
		else if(pGpio_handle->gPIO_PingConfig.pin_mode == GPIO_MODE_FRE_IT)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	795b      	ldrb	r3, [r3, #5]
 80005c8:	2b06      	cmp	r3, #6
 80005ca:	d113      	bne.n	80005f4 <gpio_init+0x1b4>
			EXTI->FTSR |= (1u << pGpio_handle->gPIO_PingConfig.pin_number);
 80005cc:	4b24      	ldr	r3, [pc, #144]	; (8000660 <gpio_init+0x220>)
 80005ce:	68da      	ldr	r2, [r3, #12]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	4619      	mov	r1, r3
 80005d6:	2301      	movs	r3, #1
 80005d8:	408b      	lsls	r3, r1
 80005da:	4921      	ldr	r1, [pc, #132]	; (8000660 <gpio_init+0x220>)
 80005dc:	4313      	orrs	r3, r2
 80005de:	60cb      	str	r3, [r1, #12]
			EXTI->RTSR |= (1U << pGpio_handle->gPIO_PingConfig.pin_number);
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <gpio_init+0x220>)
 80005e2:	689a      	ldr	r2, [r3, #8]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	4619      	mov	r1, r3
 80005ea:	2301      	movs	r3, #1
 80005ec:	408b      	lsls	r3, r1
 80005ee:	491c      	ldr	r1, [pc, #112]	; (8000660 <gpio_init+0x220>)
 80005f0:	4313      	orrs	r3, r2
 80005f2:	608b      	str	r3, [r1, #8]
		SYSCFG_CLOCK_ENABLE();
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <gpio_init+0x224>)
 80005f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005f8:	4a1a      	ldr	r2, [pc, #104]	; (8000664 <gpio_init+0x224>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fe:	6453      	str	r3, [r2, #68]	; 0x44
		uint32_t syscfg_exti_reg_no=pGpio_handle->gPIO_PingConfig.pin_number/4;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	791b      	ldrb	r3, [r3, #4]
 8000604:	089b      	lsrs	r3, r3, #2
 8000606:	b2db      	uxtb	r3, r3
 8000608:	613b      	str	r3, [r7, #16]
		uint32_t syscfg_exti_reg_bit_no = pGpio_handle->gPIO_PingConfig.pin_number%4;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	791b      	ldrb	r3, [r3, #4]
 800060e:	f003 0303 	and.w	r3, r3, #3
 8000612:	60fb      	str	r3, [r7, #12]
		uint32_t port_code=get_port_code(pGpio_handle->pGpioX);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff fec1 	bl	80003a0 <get_port_code>
 800061e:	4603      	mov	r3, r0
 8000620:	60bb      	str	r3, [r7, #8]
		SYSCFG->EXTICR[syscfg_exti_reg_no] |= (port_code << (syscfg_exti_reg_bit_no*4));
 8000622:	4a11      	ldr	r2, [pc, #68]	; (8000668 <gpio_init+0x228>)
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	3302      	adds	r3, #2
 8000628:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	68b9      	ldr	r1, [r7, #8]
 8000632:	fa01 f303 	lsl.w	r3, r1, r3
 8000636:	490c      	ldr	r1, [pc, #48]	; (8000668 <gpio_init+0x228>)
 8000638:	431a      	orrs	r2, r3
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	3302      	adds	r3, #2
 800063e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI-> IMR |= (1U << pGpio_handle->gPIO_PingConfig.pin_number);
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <gpio_init+0x220>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	4619      	mov	r1, r3
 800064c:	2301      	movs	r3, #1
 800064e:	408b      	lsls	r3, r1
 8000650:	4903      	ldr	r1, [pc, #12]	; (8000660 <gpio_init+0x220>)
 8000652:	4313      	orrs	r3, r2
 8000654:	600b      	str	r3, [r1, #0]
}
 8000656:	bf00      	nop
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40013c00 	.word	0x40013c00
 8000664:	40023800 	.word	0x40023800
 8000668:	40013800 	.word	0x40013800

0800066c <gpio_toggleto_output_pin>:
	else
		pGpiox->ODR &= ~(1u << pin_no);
}

void gpio_toggleto_output_pin(GPIO_RegDef_t* pGpiox,uint8_t pin_no)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	70fb      	strb	r3, [r7, #3]
	pGpiox->ODR ^= (1u<<pin_no);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	695a      	ldr	r2, [r3, #20]
 800067c:	78fb      	ldrb	r3, [r7, #3]
 800067e:	2101      	movs	r1, #1
 8000680:	fa01 f303 	lsl.w	r3, r1, r3
 8000684:	405a      	eors	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	615a      	str	r2, [r3, #20]
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
	...

08000698 <clear_pending_reg>:
	return res != 0 ? GPIO_PIN_SET : GPIO_PIN_RESET;
}


void clear_pending_reg(uint8_t pin_no)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	//CLEAR PR
	if(EXTI->PR & (1<<pin_no))
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <clear_pending_reg+0x3c>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	79fa      	ldrb	r2, [r7, #7]
 80006a8:	2101      	movs	r1, #1
 80006aa:	fa01 f202 	lsl.w	r2, r1, r2
 80006ae:	4013      	ands	r3, r2
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d008      	beq.n	80006c6 <clear_pending_reg+0x2e>
	   EXTI->PR |= (1U<<pin_no);
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <clear_pending_reg+0x3c>)
 80006b6:	695a      	ldr	r2, [r3, #20]
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	2101      	movs	r1, #1
 80006bc:	fa01 f303 	lsl.w	r3, r1, r3
 80006c0:	4904      	ldr	r1, [pc, #16]	; (80006d4 <clear_pending_reg+0x3c>)
 80006c2:	4313      	orrs	r3, r2
 80006c4:	614b      	str	r3, [r1, #20]
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40013c00 	.word	0x40013c00

080006d8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	delay();
 80006dc:	f000 f920 	bl	8000920 <delay>
	clear_pending_reg(GPIO_PIN_NO_0);
 80006e0:	2000      	movs	r0, #0
 80006e2:	f7ff ffd9 	bl	8000698 <clear_pending_reg>
	gpio_toggleto_output_pin(GPIOD, GPIO_PIN_NO_15);
 80006e6:	210f      	movs	r1, #15
 80006e8:	4802      	ldr	r0, [pc, #8]	; (80006f4 <EXTI0_IRQHandler+0x1c>)
 80006ea:	f7ff ffbf 	bl	800066c <gpio_toggleto_output_pin>
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40020c00 	.word	0x40020c00

080006f8 <toggle_board_random_led>:

void toggle_board_random_led()
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
	uint32_t leds_no = (get_random_number()%4 +12);  //0 1 2 3  pin 12 13 14 15
 80006fe:	f000 f903 	bl	8000908 <get_random_number>
 8000702:	4603      	mov	r3, r0
 8000704:	425a      	negs	r2, r3
 8000706:	f003 0303 	and.w	r3, r3, #3
 800070a:	f002 0203 	and.w	r2, r2, #3
 800070e:	bf58      	it	pl
 8000710:	4253      	negpl	r3, r2
 8000712:	330c      	adds	r3, #12
 8000714:	607b      	str	r3, [r7, #4]
	delay();
 8000716:	f000 f903 	bl	8000920 <delay>
	gpio_toggleto_output_pin(GPIOD, leds_no);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	4619      	mov	r1, r3
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <toggle_board_random_led+0x3c>)
 8000722:	f7ff ffa3 	bl	800066c <gpio_toggleto_output_pin>
	delay();
 8000726:	f000 f8fb 	bl	8000920 <delay>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40020c00 	.word	0x40020c00

08000738 <HASH_RNG_IRQHandler>:


//uint32_t g_random_number;

void HASH_RNG_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	if( ((RNG->SR & RNG_CEIS)==0) && ((RNG->SR & RNG_SEIS)==0) && ((RNG->SR & RNG_DRDY) ==1 ))
 800073c:	4b2f      	ldr	r3, [pc, #188]	; (80007fc <HASH_RNG_IRQHandler+0xc4>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	f003 0320 	and.w	r3, r3, #32
 8000744:	2b00      	cmp	r3, #0
 8000746:	d11b      	bne.n	8000780 <HASH_RNG_IRQHandler+0x48>
 8000748:	4b2c      	ldr	r3, [pc, #176]	; (80007fc <HASH_RNG_IRQHandler+0xc4>)
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	f003 0320 	and.w	r3, r3, #32
 8000750:	2b00      	cmp	r3, #0
 8000752:	d115      	bne.n	8000780 <HASH_RNG_IRQHandler+0x48>
 8000754:	4b29      	ldr	r3, [pc, #164]	; (80007fc <HASH_RNG_IRQHandler+0xc4>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	2b01      	cmp	r3, #1
 800075e:	d10f      	bne.n	8000780 <HASH_RNG_IRQHandler+0x48>
	{
		//g_random_number=RNG->DR;
		RNG->CR &= ~IE;
 8000760:	4b26      	ldr	r3, [pc, #152]	; (80007fc <HASH_RNG_IRQHandler+0xc4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a25      	ldr	r2, [pc, #148]	; (80007fc <HASH_RNG_IRQHandler+0xc4>)
 8000766:	f023 0308 	bic.w	r3, r3, #8
 800076a:	6013      	str	r3, [r2, #0]
		RNG->CR &= ~RNGEN;
 800076c:	4b23      	ldr	r3, [pc, #140]	; (80007fc <HASH_RNG_IRQHandler+0xc4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a22      	ldr	r2, [pc, #136]	; (80007fc <HASH_RNG_IRQHandler+0xc4>)
 8000772:	f023 0304 	bic.w	r3, r3, #4
 8000776:	6013      	str	r3, [r2, #0]
		nvic_irqno_desable(IRQ_HASH_RNG);
 8000778:	2050      	movs	r0, #80	; 0x50
 800077a:	f7ff fd5b 	bl	8000234 <nvic_irqno_desable>
 800077e:	e03b      	b.n	80007f8 <HASH_RNG_IRQHandler+0xc0>
	}
	else
	{
		//error
		if(RNG->SR & RNG_CEIS)
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <HASH_RNG_IRQHandler+0xc4>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	f003 0320 	and.w	r3, r3, #32
 8000788:	2b00      	cmp	r3, #0
 800078a:	d005      	beq.n	8000798 <HASH_RNG_IRQHandler+0x60>
			RNG->CR &= ~RNG_CEIS;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <HASH_RNG_IRQHandler+0xc4>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a1a      	ldr	r2, [pc, #104]	; (80007fc <HASH_RNG_IRQHandler+0xc4>)
 8000792:	f023 0320 	bic.w	r3, r3, #32
 8000796:	6013      	str	r3, [r2, #0]
		if(RNG->SR & RNG_SEIS)
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <HASH_RNG_IRQHandler+0xc4>)
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	f003 0320 	and.w	r3, r3, #32
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d005      	beq.n	80007b0 <HASH_RNG_IRQHandler+0x78>
			RNG->CR &= ~RNG_SEIS;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <HASH_RNG_IRQHandler+0xc4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a14      	ldr	r2, [pc, #80]	; (80007fc <HASH_RNG_IRQHandler+0xc4>)
 80007aa:	f023 0320 	bic.w	r3, r3, #32
 80007ae:	6013      	str	r3, [r2, #0]

		RCC->AHB2RSTR |= RNGRST;
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <HASH_RNG_IRQHandler+0xc8>)
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	4a12      	ldr	r2, [pc, #72]	; (8000800 <HASH_RNG_IRQHandler+0xc8>)
 80007b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ba:	6153      	str	r3, [r2, #20]
		RCC->AHB2RSTR &= ~RNGRST;
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HASH_RNG_IRQHandler+0xc8>)
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <HASH_RNG_IRQHandler+0xc8>)
 80007c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007c6:	6153      	str	r3, [r2, #20]

		RCC->CR=PLLON;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <HASH_RNG_IRQHandler+0xc8>)
 80007ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007ce:	601a      	str	r2, [r3, #0]
		while(!(RCC->CR & PLLREADY));
 80007d0:	bf00      	nop
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HASH_RNG_IRQHandler+0xc8>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0f9      	beq.n	80007d2 <HASH_RNG_IRQHandler+0x9a>
		RNG->CR |= RNGEN;
 80007de:	4b07      	ldr	r3, [pc, #28]	; (80007fc <HASH_RNG_IRQHandler+0xc4>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a06      	ldr	r2, [pc, #24]	; (80007fc <HASH_RNG_IRQHandler+0xc4>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6013      	str	r3, [r2, #0]
		RNG->CR |= IE;
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <HASH_RNG_IRQHandler+0xc4>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a03      	ldr	r2, [pc, #12]	; (80007fc <HASH_RNG_IRQHandler+0xc4>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6013      	str	r3, [r2, #0]
	}
}
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	50060800 	.word	0x50060800
 8000800:	40023800 	.word	0x40023800

08000804 <main>:
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af00      	add	r7, sp, #0


	GPIO_Handle_t GPIO_PIN_BLUE={GPIOD,{GPIO_PIN_NO_15,
 800080a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <main+0xb0>)
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
 800081a:	230f      	movs	r3, #15
 800081c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000820:	2301      	movs	r3, #1
 8000822:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000826:	2301      	movs	r3, #1
 8000828:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
										GPIO_MODE_OUT,
										GPIO_OTYPE_PP,
										GPIO_NO_PUPD,
										GPIO_SPEED_MEDIUM}
										};
	gpio_init(&GPIO_PIN_BLUE);
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fe05 	bl	8000440 <gpio_init>

	GPIO_Handle_t GPIO_PIN_RED={GPIOD,{GPIO_PIN_NO_14,
 8000836:	f107 0318 	add.w	r3, r7, #24
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <main+0xb0>)
 8000844:	61bb      	str	r3, [r7, #24]
 8000846:	230e      	movs	r3, #14
 8000848:	773b      	strb	r3, [r7, #28]
 800084a:	2301      	movs	r3, #1
 800084c:	777b      	strb	r3, [r7, #29]
 800084e:	2301      	movs	r3, #1
 8000850:	f887 3020 	strb.w	r3, [r7, #32]
											GPIO_MODE_OUT,
											GPIO_OTYPE_PP,
											GPIO_NO_PUPD,
											GPIO_SPEED_MEDIUM}
											};
	gpio_init(&GPIO_PIN_RED);
 8000854:	f107 0318 	add.w	r3, r7, #24
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fdf1 	bl	8000440 <gpio_init>

	GPIO_Handle_t GPIO_PIN_ORANGE={GPIOD,{GPIO_PIN_NO_13,
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <main+0xb0>)
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	230d      	movs	r3, #13
 8000870:	743b      	strb	r3, [r7, #16]
 8000872:	2301      	movs	r3, #1
 8000874:	747b      	strb	r3, [r7, #17]
 8000876:	2301      	movs	r3, #1
 8000878:	753b      	strb	r3, [r7, #20]
												GPIO_MODE_OUT,
												GPIO_OTYPE_PP,
												GPIO_NO_PUPD,
												GPIO_SPEED_MEDIUM}
												};
		gpio_init(&GPIO_PIN_ORANGE);
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fdde 	bl	8000440 <gpio_init>

	GPIO_Handle_t GPIO_PIN_GREEN={GPIOD,{GPIO_PIN_NO_12,
 8000884:	463b      	mov	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <main+0xb0>)
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	230c      	movs	r3, #12
 8000894:	713b      	strb	r3, [r7, #4]
 8000896:	2301      	movs	r3, #1
 8000898:	717b      	strb	r3, [r7, #5]
 800089a:	2301      	movs	r3, #1
 800089c:	723b      	strb	r3, [r7, #8]
													GPIO_MODE_OUT,
													GPIO_OTYPE_PP,
													GPIO_NO_PUPD,
													GPIO_SPEED_MEDIUM}
													};
	gpio_init(&GPIO_PIN_GREEN);
 800089e:	463b      	mov	r3, r7
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fdcd 	bl	8000440 <gpio_init>




	rng_init();
 80008a6:	f000 f807 	bl	80008b8 <rng_init>

	while(1){
		rng_init();
 80008aa:	f000 f805 	bl	80008b8 <rng_init>
		toggle_board_random_led();
 80008ae:	f7ff ff23 	bl	80006f8 <toggle_board_random_led>
		rng_init();
 80008b2:	e7fa      	b.n	80008aa <main+0xa6>
 80008b4:	40020c00 	.word	0x40020c00

080008b8 <rng_init>:
 *      Author: ramazanyucel
 */
#include "rng.h"

void rng_init()
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	//PLLON
	RCC->CR = PLLON;
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <rng_init+0x48>)
 80008be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008c2:	601a      	str	r2, [r3, #0]
	//
	while(!(RCC->CR  &  PLLREADY));
 80008c4:	bf00      	nop
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <rng_init+0x48>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d0f9      	beq.n	80008c6 <rng_init+0xe>

	// 1. RNG Clock Enable
	RNG_CLOCK_ENABLE();
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <rng_init+0x48>)
 80008d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008d6:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <rng_init+0x48>)
 80008d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008dc:	6353      	str	r3, [r2, #52]	; 0x34
	// 2. Enable Interrupt  RNG_CR
	RNG->CR |= IE;
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <rng_init+0x4c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <rng_init+0x4c>)
 80008e4:	f043 0308 	orr.w	r3, r3, #8
 80008e8:	6013      	str	r3, [r2, #0]

	RNG->CR |= RNGEN;
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <rng_init+0x4c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a05      	ldr	r2, [pc, #20]	; (8000904 <rng_init+0x4c>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	6013      	str	r3, [r2, #0]

	//INTERRUPT_ENABLE
	nvic_irqno_enable(IRQ_HASH_RNG);
 80008f6:	2050      	movs	r0, #80	; 0x50
 80008f8:	f7ff fc66 	bl	80001c8 <nvic_irqno_enable>

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40023800 	.word	0x40023800
 8000904:	50060800 	.word	0x50060800

08000908 <get_random_number>:

uint32_t get_random_number()
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
		return RNG->DR;
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <get_random_number+0x14>)
 800090e:	689b      	ldr	r3, [r3, #8]
}
 8000910:	4618      	mov	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	50060800 	.word	0x50060800

08000920 <delay>:
 */

#include"utility.h"

void delay()
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
	for(int i=0; i<250000; i++)
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	e002      	b.n	8000932 <delay+0x12>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3301      	adds	r3, #1
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <delay+0x28>)
 8000936:	4293      	cmp	r3, r2
 8000938:	ddf8      	ble.n	800092c <delay+0xc>
		;
}
 800093a:	bf00      	nop
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	0003d08f 	.word	0x0003d08f

0800094c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800094e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000950:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <LoopForever+0x6>)
  ldr r1, =_edata
 8000956:	490d      	ldr	r1, [pc, #52]	; (800098c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <LoopForever+0xe>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800096c:	4c0a      	ldr	r4, [pc, #40]	; (8000998 <LoopForever+0x16>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800097a:	f000 f811 	bl	80009a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800097e:	f7ff ff41 	bl	8000804 <main>

08000982 <LoopForever>:

LoopForever:
  b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
  ldr   r0, =_estack
 8000984:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000990:	08000a08 	.word	0x08000a08
  ldr r2, =_sbss
 8000994:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000998:	2000001c 	.word	0x2000001c

0800099c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC_IRQHandler>
	...

080009a0 <__libc_init_array>:
 80009a0:	b570      	push	{r4, r5, r6, lr}
 80009a2:	4d0d      	ldr	r5, [pc, #52]	; (80009d8 <__libc_init_array+0x38>)
 80009a4:	4c0d      	ldr	r4, [pc, #52]	; (80009dc <__libc_init_array+0x3c>)
 80009a6:	1b64      	subs	r4, r4, r5
 80009a8:	10a4      	asrs	r4, r4, #2
 80009aa:	2600      	movs	r6, #0
 80009ac:	42a6      	cmp	r6, r4
 80009ae:	d109      	bne.n	80009c4 <__libc_init_array+0x24>
 80009b0:	4d0b      	ldr	r5, [pc, #44]	; (80009e0 <__libc_init_array+0x40>)
 80009b2:	4c0c      	ldr	r4, [pc, #48]	; (80009e4 <__libc_init_array+0x44>)
 80009b4:	f000 f818 	bl	80009e8 <_init>
 80009b8:	1b64      	subs	r4, r4, r5
 80009ba:	10a4      	asrs	r4, r4, #2
 80009bc:	2600      	movs	r6, #0
 80009be:	42a6      	cmp	r6, r4
 80009c0:	d105      	bne.n	80009ce <__libc_init_array+0x2e>
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80009c8:	4798      	blx	r3
 80009ca:	3601      	adds	r6, #1
 80009cc:	e7ee      	b.n	80009ac <__libc_init_array+0xc>
 80009ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80009d2:	4798      	blx	r3
 80009d4:	3601      	adds	r6, #1
 80009d6:	e7f2      	b.n	80009be <__libc_init_array+0x1e>
 80009d8:	08000a00 	.word	0x08000a00
 80009dc:	08000a00 	.word	0x08000a00
 80009e0:	08000a00 	.word	0x08000a00
 80009e4:	08000a04 	.word	0x08000a04

080009e8 <_init>:
 80009e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ea:	bf00      	nop
 80009ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ee:	bc08      	pop	{r3}
 80009f0:	469e      	mov	lr, r3
 80009f2:	4770      	bx	lr

080009f4 <_fini>:
 80009f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009f6:	bf00      	nop
 80009f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009fa:	bc08      	pop	{r3}
 80009fc:	469e      	mov	lr, r3
 80009fe:	4770      	bx	lr
